<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JavaScript on Note about technology</title>
    <link>https://xingelf.github.io/tags/javascript/</link>
    <description>Recent content in JavaScript on Note about technology</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Wed, 14 May 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://xingelf.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The Ultimate Guide to Handlebars Template Engine: From Fundamentals to Expert Practices</title>
      <link>https://xingelf.github.io/tech/handlebars/</link>
      <pubDate>Wed, 14 May 2025 00:00:00 +0000</pubDate>
      <guid>https://xingelf.github.io/tech/handlebars/</guid>
      <description>&lt;p&gt;Handlebars is a &lt;strong&gt;logic-less templating engine&lt;/strong&gt; for JavaScript, designed to generate dynamic HTML/text content. Built as an extension of Mustache, it combines simplicity with powerful features like &lt;strong&gt;custom helpers&lt;/strong&gt; and &lt;strong&gt;precompilation&lt;/strong&gt;, making it suitable for both frontend (e.g., React, Vue) and backend (Node.js) workflows.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Unmasking Prototype Pollution: A Deep Dive into the Mechanics and Mitigation Strategies</title>
      <link>https://xingelf.github.io/tech/prototype_pollution/</link>
      <pubDate>Wed, 07 May 2025 00:00:00 +0000</pubDate>
      <guid>https://xingelf.github.io/tech/prototype_pollution/</guid>
      <description>&lt;p&gt;In the evolving landscape of web application security, &lt;strong&gt;Prototype Pollution&lt;/strong&gt; has emerged as a sophisticated and potentially critical vulnerability, particularly within &lt;strong&gt;JavaScript&lt;/strong&gt; environments. Exploiting the inherent prototypal inheritance mechanism of JavaScript, this attack vector allows malicious actors to inject or overwrite properties in the prototypes of objects, leading to unexpected and often detrimental consequences for the application&amp;rsquo;s integrity and security.&lt;/p&gt;</description>
    </item>
    <item>
      <title>JavaScript&#39;s Promise, Async, Await in 3 minutes </title>
      <link>https://xingelf.github.io/tech/js-promise/</link>
      <pubDate>Tue, 19 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://xingelf.github.io/tech/js-promise/</guid>
      <description>&lt;h2 id=&#34;javascripts-promise-async-and-await-mastering-asynchronous-programming&#34;&gt;JavaScript&amp;rsquo;s Promise, Async, and Await: Mastering Asynchronous Programming&lt;/h2&gt;&#xA;&lt;p&gt;JavaScript reigns supreme in web development, but handling asynchronous operations can introduce complexity. This is where Promise, Async, and Await come to the rescue. These powerful tools simplify and streamline asynchronous programming in JavaScript.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>

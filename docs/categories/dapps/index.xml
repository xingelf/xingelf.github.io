<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dapps on Try Harder</title>
    <link>https://xingelf.github.io/categories/dapps/</link>
    <description>Recent content in Dapps on Try Harder</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Thu, 19 Sep 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://xingelf.github.io/categories/dapps/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Understanding Solidity Modifiers: A Practical Guide</title>
      <link>https://xingelf.github.io/dapps/solidity_modifier/</link>
      <pubDate>Thu, 19 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://xingelf.github.io/dapps/solidity_modifier/</guid>
      <description>&lt;p&gt;Modifiers in Solidity can be confusing for newcomers. This guide explains their purpose and usage in simple terms.&lt;br&gt;&#xA;Modifiers act as &lt;strong&gt;function decorators&lt;/strong&gt; that let you add reusable preconditions to functions. They are commonly used for checks like ownership validation before executing a function&amp;rsquo;s core logic.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Quick Introdution of hardhat</title>
      <link>https://xingelf.github.io/dapps/hardhat/</link>
      <pubDate>Sat, 09 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://xingelf.github.io/dapps/hardhat/</guid>
      <description>&lt;p&gt;When developing smart contracts using Solidity, efficient development processes and reliable testing are crucial. Therefore, in this article, we&amp;rsquo;ll introduce and explore Hardhat, a handy tool for Solidity developers.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Solidity Functions 🛠️</title>
      <link>https://xingelf.github.io/dapps/solidity-function/</link>
      <pubDate>Sat, 15 Oct 2022 00:00:00 +0000</pubDate>
      <guid>https://xingelf.github.io/dapps/solidity-function/</guid>
      <description>&lt;p&gt;Solidity functions are the building blocks of smart contracts, allowing you to define the behavior and logic of your decentralized applications. They can be called internally or externally, and their visibility and state permissions can be controlled through modifiers. Understanding how to properly implement functions is crucial for creating efficient and secure smart contracts.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Solidity文法　mapping マッピング</title>
      <link>https://xingelf.github.io/dapps/solidity-mapping/</link>
      <pubDate>Fri, 30 Sep 2022 00:00:00 +0000</pubDate>
      <guid>https://xingelf.github.io/dapps/solidity-mapping/</guid>
      <description>&lt;p&gt;mappingはkey, valueの対応を定義するもので、ハッシュテーブル、辞書型のようなものです。&#xA;典型的な利用法があり、ブロックチェーン上のウォレットアドレスにある&#xA;残高をマップするケースでほぼ必ず利用されます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Solidity 最も簡単なコントラクトの作成</title>
      <link>https://xingelf.github.io/dapps/solidity-1stcontract/</link>
      <pubDate>Mon, 19 Sep 2022 00:00:00 +0000</pubDate>
      <guid>https://xingelf.github.io/dapps/solidity-1stcontract/</guid>
      <description>&lt;p&gt;Solidity学習リソースでよく紹介されている最も簡単なコントラクトを&#xA;REMIXを利用して作成します。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Solidity文法　SafeMath</title>
      <link>https://xingelf.github.io/dapps/solidity-safemath/</link>
      <pubDate>Sun, 11 Sep 2022 00:00:00 +0000</pubDate>
      <guid>https://xingelf.github.io/dapps/solidity-safemath/</guid>
      <description>&lt;h1 id=&#34;solidity-safemath-四足演算ライブラリ&#34;&gt;Solidity SafeMath 四足演算ライブラリ&lt;/h1&gt;&#xA;&lt;p&gt;assertによりオーバーフロー対策を行うことができます。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>

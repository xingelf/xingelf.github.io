<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>XSS on Try Harder </title>
    <link>https://xingelf.github.io/tags/xss/</link>
    <description>Recent content in XSS on Try Harder </description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Thu, 01 May 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://xingelf.github.io/tags/xss/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Understanding DOM-based XSS: Mechanism, Examples, and Prevention</title>
      <link>https://xingelf.github.io/tech/dom-based_xss/</link>
      <pubDate>Thu, 01 May 2025 00:00:00 +0000</pubDate>
      <guid>https://xingelf.github.io/tech/dom-based_xss/</guid>
      <description>&lt;p&gt;Web security is paramount for both users and website providers. Among the various web vulnerabilities, Cross-Site Scripting (XSS) is a prominent attack method targeting users.&lt;/p&gt;</description>
    </item>
    <item>
      <title>XSS Hunting: Risks of document.write and Detection Strategies</title>
      <link>https://xingelf.github.io/tech/xss_dom_huting/</link>
      <pubDate>Thu, 24 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://xingelf.github.io/tech/xss_dom_huting/</guid>
      <description>&lt;p&gt;The &lt;code&gt;document.write&lt;/code&gt; method in JavaScript remains a critical vector for Cross-Site Scripting (XSS) vulnerabilities. While it dynamically injects HTML content, improper handling of user input can enable attackers to execute arbitrary scripts. This article explores practical techniques to identify and mitigate risks associated with &lt;code&gt;document.write&lt;/code&gt;, supported by real-world cases and defensive frameworks.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Solidity on Try Harder</title>
    <link>https://xingelf.github.io/tags/solidity/</link>
    <description>Recent content in Solidity on Try Harder</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Mon, 30 Sep 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://xingelf.github.io/tags/solidity/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Solidity Syntax: Mapping</title>
      <link>https://xingelf.github.io/dapps/solidity-mapping/</link>
      <pubDate>Mon, 30 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://xingelf.github.io/dapps/solidity-mapping/</guid>
      <description>&lt;h2 id=&#34;what-is-a-mapping-in-solidity&#34;&gt;What is a Mapping in Solidity?&lt;/h2&gt;&#xA;&lt;p&gt;A &lt;code&gt;mapping&lt;/code&gt; in Solidity is a key-value data structure, similar to a hash table or dictionary in other programming languages. It is commonly used to associate wallet addresses with balances on the blockchain.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Understanding Solidity Modifiers: A Practical Guide</title>
      <link>https://xingelf.github.io/dapps/solidity_modifier/</link>
      <pubDate>Thu, 19 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://xingelf.github.io/dapps/solidity_modifier/</guid>
      <description>&lt;p&gt;Modifiers in Solidity can be confusing for newcomers. This guide explains their purpose and usage in simple terms.&lt;br&gt;&#xA;Modifiers act as &lt;strong&gt;function decorators&lt;/strong&gt; that let you add reusable preconditions to functions. They are commonly used for checks like ownership validation before executing a function&amp;rsquo;s core logic.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Quick Introdution of hardhat</title>
      <link>https://xingelf.github.io/dapps/hardhat/</link>
      <pubDate>Sat, 09 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://xingelf.github.io/dapps/hardhat/</guid>
      <description>&lt;p&gt;When developing smart contracts using Solidity, efficient development processes and reliable testing are crucial. Therefore, in this article, we&amp;rsquo;ll introduce and explore Hardhat, a handy tool for Solidity developers.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Solidity Functions üõ†Ô∏è</title>
      <link>https://xingelf.github.io/dapps/solidity-function/</link>
      <pubDate>Sat, 15 Oct 2022 00:00:00 +0000</pubDate>
      <guid>https://xingelf.github.io/dapps/solidity-function/</guid>
      <description>&lt;p&gt;Solidity functions are the building blocks of smart contracts, allowing you to define the behavior and logic of your decentralized applications. They can be called internally or externally, and their visibility and state permissions can be controlled through modifiers. Understanding how to properly implement functions is crucial for creating efficient and secure smart contracts.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Creating Your First Simple Solidity Smart Contract with Remix IDE</title>
      <link>https://xingelf.github.io/dapps/solidity-1stcontract/</link>
      <pubDate>Mon, 19 Sep 2022 00:00:00 +0000</pubDate>
      <guid>https://xingelf.github.io/dapps/solidity-1stcontract/</guid>
      <description>&lt;p&gt;Learn how to create your first simple Solidity smart contract using the popular Remix IDE. This tutorial covers the most basic contract that&amp;rsquo;s often introduced in Solidity learning resources.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Solidity SafeMath Library: Secure Arithmetic Operations</title>
      <link>https://xingelf.github.io/dapps/solidity-safemath/</link>
      <pubDate>Sun, 11 Sep 2022 00:00:00 +0000</pubDate>
      <guid>https://xingelf.github.io/dapps/solidity-safemath/</guid>
      <description>&lt;h1 id=&#34;solidity-safemath-library-secure-arithmetic-operations-&#34;&gt;Solidity SafeMath Library: Secure Arithmetic Operations üîí&lt;/h1&gt;&#xA;&lt;p&gt;The SafeMath library provides secure arithmetic operations that prevent overflow and underflow vulnerabilities using assert statements.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Understanding ERC20 Token Standard in Solidity</title>
      <link>https://xingelf.github.io/dapps/solidity-erc20/</link>
      <pubDate>Sun, 11 Sep 2022 00:00:00 +0000</pubDate>
      <guid>https://xingelf.github.io/dapps/solidity-erc20/</guid>
      <description>&lt;h1 id=&#34;understanding-erc20-token-standard-in-solidity&#34;&gt;Understanding ERC20 Token Standard in Solidity&lt;/h1&gt;&#xA;&lt;p&gt;The ERC20 standard is a specification for tokens that operate on the Ethereum blockchain. It defines a common set of rules that all Ethereum-based tokens must follow, ensuring compatibility across different platforms and applications.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Solidity Data Types: Complete Guide for Smart Contract Development</title>
      <link>https://xingelf.github.io/dapps/solidity-type/</link>
      <pubDate>Sat, 03 Sep 2022 00:00:00 +0000</pubDate>
      <guid>https://xingelf.github.io/dapps/solidity-type/</guid>
      <description>&lt;h1 id=&#34;solidity-data-types-complete-guide-for-smart-contract-development&#34;&gt;Solidity Data Types: Complete Guide for Smart Contract Development&lt;/h1&gt;&#xA;&lt;p&gt;Solidity is a statically-typed programming language designed for writing smart contracts on the Ethereum blockchain. This means you must specify the data type of every variable when declaring it, which helps the compiler catch errors and ensures your code is both safe and efficient.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
